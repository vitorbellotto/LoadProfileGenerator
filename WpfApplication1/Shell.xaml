<!--  ReSharper disable UnusedMember.Global  -->
<Window
    x:Class="LoadProfileGenerator.Shell"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:model="clr-namespace:LoadProfileGenerator.Model"
    xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:usercontrols1="clr-namespace:LoadProfileGenerator.Controls.Usercontrols"
    Title="LoadProfileGenerator"
    Width="1000"
    Height="700"
    Closed="Shell_OnClosed"
    Closing="Window_Closing">
    <Window.Resources>

        <!--
        xmlns:converters="clr-namespace:LoadProfileGenerator.Controls.Converters"
        <converters:BrushConverter x:Key="BrushConverter" />
            This color will be used to draw a border around the TabControl, on
            the bottom of the TabPanel and on the bottom of unselected TabItems.
        -->
        <Color x:Key="BorderColorBase">#888</Color>

        <!--
            This color will be used to draw the (outer) background of TabPages and
            the selected TabItem.
        -->
        <Color x:Key="TabControlBackgroundColorBase">#fefeFe</Color>

        <!--    -->
        <Color x:Key="TabItemForegroundColorBase">#4971A3</Color>

        <!--  Brushes used for styling the TabControl  -->
        <SolidColorBrush x:Key="TabControlBackgroundBrushBase" Color="{StaticResource TabControlBackgroundColorBase}" />

        <!--  Brushes for drawing the outer and inner borders on TabPages  -->
        <SolidColorBrush x:Key="TabPageInnerBorderBrushDark" Color="#FF8DB2E3" />
        <LinearGradientBrush x:Key="TabPageInnerBorderBrushBright" StartPoint="0,0" EndPoint="1,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0" Color="Transparent" />
                <GradientStop Offset="1" Color="#FFC0F9FF" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <!--
            We only want to render a line between the TabControl's TabPage-area and
            the TabItemsPanel where there is no TabItem/TabStrip. However, we cannot
            simply set the TabPanel's Background-property as this would affect
            the area as a whole.
            The trick here is to define a gradient that only renders a 1px line at
            the bottom. Since TabItems are rendered above the background, this line
            will only be visible in the area that doesn't contain a TabItem.
            We'll achieve this effect by using a gradient that finishes with the
            border-color, but only for the last .01%.
        -->
        <!--<Color x:Key="TabPanel_BackgroundColor_Base">#ABCABC</Color>-->
        <Color x:Key="TabPanelBackgroundColorBase">Transparent</Color>
        <LinearGradientBrush x:Key="TabPanelBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <!--<GradientStop Offset="0.98" Color="Transparent"/>-->
                <GradientStop Offset="0.98" Color="{StaticResource TabPanelBackgroundColorBase}" />
                <GradientStop Offset="0.99" Color="{StaticResource BorderColorBase}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <!--  Brushes used for styling TabItems (Background)  -->
        <LinearGradientBrush x:Key="TabItemBackgroundBrushDisabled" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0" Color="#EEE" />
                <GradientStop Offset="0.98" Color="#BBB" />
                <!--
                    This is the same trick as with the TabPanel_BackgroundBrush (see there).
                -->
                <GradientStop Offset="0.99" Color="{StaticResource BorderColorBase}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="TabItemBackgroundBrushSelected" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.1" Color="#FFFFC14A" />
                <GradientStop Offset="0.15" Color="{StaticResource TabControlBackgroundColorBase}" />
                <GradientStop Offset="0.8" Color="#C5DBF6" />
                <GradientStop Offset="1.0" Color="{StaticResource TabControlBackgroundColorBase}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="TabItemBackgroundBrushUnselected" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.0" Color="#E8F2FF" />
                <GradientStop Offset="0.3" Color="#DFE9F6" />
                <GradientStop Offset="0.7" Color="#C7D8EE" />
                <GradientStop Offset="0.98" Color="#B9CADE" />
                <!--  See the TabPanel_BackgroundBrush comment.  -->
                <GradientStop Offset="0.99" Color="{StaticResource BorderColorBase}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="TabItemHoverBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientStop Offset="0.3" Color="#FFFFD5A0" />
            <GradientStop Offset="0.51" Color="#FFFFA335" />
            <GradientStop Offset="0.98" Color="#FFFFC14A" />
        </LinearGradientBrush>

        <!--  Brushes used for styling TabItems (Foreground/Text)  -->
        <SolidColorBrush x:Key="TabItemTextBrushUnselected" Color="{StaticResource TabItemForegroundColorBase}" />
        <SolidColorBrush x:Key="TabItemTextBrushDisabled" Color="#888" />
        <SolidColorBrush x:Key="TabItemTextBrushHover" Color="#2D2C8A" />
        <SolidColorBrush x:Key="TabItemTextBrushSelected" Color="#0D3288" />

        <!--  Brushes used for styling TabItems (Borders)  -->
        <!--
            For all borders around the TabItems, we'll have to use either the
            identical color OR (what's being done here) we'll have to assure the
            bottom of the border will always result in the color that is being
            used for drawing the line between the TabControl and the TabPanel.
            
            If we do use a different (solid) color here, the bottom line will not
            be rendered as desired which I presume is a matter of precedence in the
            way borders are being drawn (anti-clockwise, starting with bottom and
            finishing with left, hence the effect of the left and right edges of
            the bottom line being drawn with the left and right border respectively).
            If you want to try it out, exchange the LinearGradientBrush with the
            SolidColorBrush that has been commented out and run the app.
            You'll probably have to zoom in to see the effect.
        -->
        <!--<SolidColorBrush x:Key="TabItem_DisabledBorderBrush" Color="#CCC" />-->
        <LinearGradientBrush x:Key="TabItemDisabledBorderBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#CCC" />
            <GradientStop Offset="0.8" Color="{StaticResource BorderColorBase}" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItemBorderBrushSelected" Color="{StaticResource BorderColorBase}" />
        <!--  See the comment regarding the TabItem_DisabledBorderBrush above.  -->
        <LinearGradientBrush x:Key="TabItemBorderUnselected" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#AAA" />
            <GradientStop Offset="0.8" Color="{StaticResource BorderColorBase}" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="TabItemHoverBorderBrush" StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.98" Color="DarkOrange" />
                <!--  See the TabPanel_BackgroundBrush comment.  -->
                <GradientStop Offset="0.99" Color="{StaticResource BorderColorBase}" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <!--
            Margins for TabItems - these will be set in the respective triggers;
            also, the transition between two states will be animated using the Storyboards
            below.
        -->
        <Thickness x:Key="TabItemMarginBase">0,8,-4,0</Thickness>
        <Thickness x:Key="TabItemMarginSelected">-4,0,-4,0</Thickness>
        <Thickness x:Key="TabItemMarginHoverStart">0,2,0,0</Thickness>
        <Thickness x:Key="TabItemMarginHoverFinal">0,4,0,0</Thickness>
        <!--  The Margin for the ScrollableTabPanel (inside the ScrollViewer)  -->
        <Thickness x:Key="TabPanelPadding">4,0,4,0</Thickness>
        <!--
            The margin for the StackPanel that hosts the scroll-controls and the
            Menu making up the "TabItem-QuickPicker".
        -->
        <Thickness x:Key="TabPanelScrollControlsPanelMargin">5,0,0,2</Thickness>

        <!--  Transistion effects (animations) - added in part two  -->
        <!--  This will run when a TabItem enters the "Unselected" state  -->
        <Storyboard x:Key="TabItemStoryBoardUnselected">
            <ThicknessAnimation
                FillBehavior="HoldEnd"
                Storyboard.TargetName="Border"
                Storyboard.TargetProperty="Margin"
                To="{StaticResource TabItemMarginBase}"
                Duration="0:0:0.1" />
        </Storyboard>
        <!--  This will run when a TabItem enters the "Selected" state  -->
        <Storyboard x:Key="TabItemStoryBoardSelected">
            <ThicknessAnimation
                FillBehavior="HoldEnd"
                Storyboard.TargetName="Border"
                Storyboard.TargetProperty="Margin"
                To="{StaticResource TabItemMarginSelected}"
                Duration="0:0:0.1" />
        </Storyboard>
        <!--  This will run when a TabItem enters the "Hover" state  -->
        <Storyboard x:Key="TabItemStoryBoardHover">
            <ThicknessAnimationUsingKeyFrames
                FillBehavior="HoldEnd"
                Storyboard.TargetName="Border"
                Storyboard.TargetProperty="Margin">
                <SplineThicknessKeyFrame KeyTime="0:0:0.1" Value="{StaticResource TabItemMarginHoverStart}" />
                <SplineThicknessKeyFrame KeyTime="0:0:0.2" Value="{StaticResource TabItemMarginHoverFinal}" />
            </ThicknessAnimationUsingKeyFrames>
        </Storyboard>

        <!--  The colors that will be used when assembling the brushes for the LineButtons  -->
        <Color x:Key="LineButtonBackgroundColorBright">LightGoldenrodYellow</Color>
        <Color x:Key="LineButtonBackgroundColorDark">#FAEEB1</Color>
        <Color x:Key="LineButtonBackgroundColorDisabledBright">#EEE</Color>
        <Color x:Key="LineButtonBackgroundColorDisabledDark">#999</Color>

        <!--  Color of the border around the scrollbar-thumb  -->
        <SolidColorBrush x:Key="LineButtonBorderBrush" Color="#FF8693BD" />

        <!--  The color for the scrollbar's line-buttons when the mouse hovers over them  -->
        <LinearGradientBrush x:Key="LineButtonHoverBrush" StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientStop Offset="0.3" Color="#FFFFD5A0" />
            <GradientStop Offset="0.51" Color="#FFFFA335" />
            <GradientStop Offset="0.986" Color="#FFFFC14A" />
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="LineButtonBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0.3" Color="{StaticResource LineButtonBackgroundColorBright}" />
            <GradientStop Offset="0.4" Color="{StaticResource LineButtonBackgroundColorDark}" />
            <GradientStop Offset="1" Color="{StaticResource LineButtonBackgroundColorBright}" />
        </LinearGradientBrush>


        <!--  The color for the scrollbar's line-buttons when they're clicked/pressed  -->
        <LinearGradientBrush x:Key="LineButtonPressedBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="{StaticResource LineButtonBackgroundColorBright}" />
            <GradientStop Offset="0.6" Color="{StaticResource LineButtonBackgroundColorDark}" />
            <GradientStop Offset="0.7" Color="{StaticResource LineButtonBackgroundColorBright}" />
        </LinearGradientBrush>

        <!--  The color to be used when drawing the arrows on the scrollbar's line-buttons  -->
        <SolidColorBrush x:Key="LineButtonBrush" Color="#FF14273D" />
        <!--  The color to be used for painting the interior of the TabItem-menu's path  -->
        <LinearGradientBrush x:Key="TabMenuButtonBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Offset="0" Color="White" />
            <GradientStop Offset="1" Color="#F3F3E3" />
        </LinearGradientBrush>

        <!--  The color for the scrollbar's line-buttons when they're disabled  -->
        <LinearGradientBrush x:Key="LineButtonDisabledBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="{StaticResource LineButtonBackgroundColorDisabledBright}" />
            <GradientStop Offset="1" Color="{StaticResource LineButtonBackgroundColorDisabledDark}" />
        </LinearGradientBrush>

        <!--  The background color of the TabItems popup-menu  -->
        <LinearGradientBrush x:Key="TabItemMenuBackcolor" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Offset="0" Color="White" />
            <GradientStop Offset="1" Color="#EEE" />
        </LinearGradientBrush>

        <!--
            The Geometries below will be used to render the ScrollViewer's LineLeft-,
            LineRight- and TabMenu-buttons.
        -->
        <Geometry x:Key="ArrowLeft">M0,5 L10,10 10,0Z</Geometry>
        <Geometry x:Key="ArrowRight">M0,0 L10,5 L0,10Z</Geometry>
        <Geometry x:Key="ArrowDown">M0,0 L5,5 L10,0Z</Geometry>
        <Geometry x:Key="TabMenuButton">
            M0,1 H0,5 M7,8 L0,8 0,2 10,2 L10,5 M10,8 L10,10 8,10Z
        </Geometry>
        <!--  ******** added in part IV ************  -->
        <Geometry x:Key="XCloseButton">
            M0,0 L10,10 M0,10 L10,0
        </Geometry>

        <!--
            Definitions for the Path-Geometries that are being used to render
            the ScrollViewer's LineButtons.
        -->
        <Path
            x:Key="ArrowLeftPath"
            Margin="4,3"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="{StaticResource ArrowLeft}"
            Fill="{StaticResource LineButtonBrush}"
            Stretch="Fill"
            Stroke="{StaticResource LineButtonBrush}" />
        <Path
            x:Key="ArrowRightPath"
            Margin="4,3"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="{StaticResource ArrowRight}"
            Fill="{StaticResource LineButtonBrush}"
            Stretch="Fill"
            Stroke="{StaticResource LineButtonBrush}" />
        <Path
            x:Key="ArrowDownPath"
            Margin="4,3"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="{StaticResource ArrowDown}"
            Fill="{StaticResource LineButtonBrush}"
            Stretch="Fill"
            Stroke="{StaticResource LineButtonBrush}" />
        <Path
            x:Key="TabMenuButtonPath"
            Margin="2"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="{StaticResource TabMenuButton}"
            Fill="{StaticResource TabMenuButtonBrush}"
            Stretch="Fill"
            Stroke="{StaticResource LineButtonBrush}" />

        <!--
            This determines how wide/high the LineButtons and the TabMenu button
            will be rendered.
        -->
        <sys:Double x:Key="ButtonWidthAndHeight">16</sys:Double>

        <!--  ******** TabItemCloseButton (added in part IV) -> ************  -->
        <!--
            This determines how wide/high the CloseButtons on TabItems
            will be rendered.
        -->
        <sys:Double x:Key="CloseButtonWidthAndHeight">14</sys:Double>

        <!--  Styles for the LineButtons  -->
        <Style x:Key="LineButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Height" Value="{StaticResource ButtonWidthAndHeight}" />
            <Setter Property="Width" Value="{StaticResource ButtonWidthAndHeight}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border
                            Name="ButtonBorder"
                            Margin="1"
                            Background="{StaticResource LineButtonBackgroundBrush}"
                            BorderBrush="{StaticResource LineButtonBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="1">
                            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource LineButtonHoverBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource LineButtonPressedBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource LineButtonDisabledBrush}" />
                                <Setter TargetName="ButtonBorder" Property="Opacity" Value="0.4" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
            The style for the MenuItem that represents the clickable portion
            for opening the sub-menu that itself will contain the list of
            TabItems.
        -->
        <Style x:Key="TabMenuButtonStyle" TargetType="{x:Type MenuItem}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Height" Value="{StaticResource ButtonWidthAndHeight}" />
            <Setter Property="Width" Value="{StaticResource ButtonWidthAndHeight}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border
                            Name="ButtonBorder"
                            Margin="1"
                            Background="{StaticResource LineButtonBackgroundBrush}"
                            BorderBrush="{StaticResource LineButtonBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="1">
                            <Grid>
                                <ContentPresenter
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Content="{StaticResource TabMenuButtonPath}"
                                    ContentSource="Header" />
                                <Popup
                                    Name="Popup"
                                    AllowsTransparency="True"
                                    Focusable="False"
                                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                                    Placement="Bottom"
                                    PopupAnimation="Fade">
                                    <!--
                                        Since we override the ControlTemplate, we're also responsible
                                        for drawing stuff like the shadow around the popup-menu.
                                        
                                        Here, I'll use a Chrome that's provided in the Aero assembly.
                                        Note that, in order to use this (that is, the namespace defined
                                        at the very top of this window), a reference to
                                        PresentationFramework.Aero is required.
                                    -->
                                    <mwt:SystemDropShadowChrome
                                        Margin="0,0,8,8"
                                        CornerRadius="1"
                                        SnapsToDevicePixels="True"
                                        Color="#71000000">
                                        <Border
                                            Name="SubmenuBorder"
                                            Margin="1"
                                            Background="{StaticResource TabItemMenuBackcolor}"
                                            BorderBrush="{StaticResource LineButtonBorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="1"
                                            SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Border>
                                    </mwt:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource LineButtonHoverBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="MenuItemForegroundBrush" Color="#333" />
        <SolidColorBrush x:Key="MenuItemDisabledForegroundBrush" Color="#AAA" />
        <SolidColorBrush x:Key="MenuItemDisabledBackgroundBrush" Color="#1555" />

        <!--  The style for MenuItems that represent TabItems  -->
        <Style x:Key="TabMenuItem" TargetType="{x:Type MenuItem}">
            <!--
                In order to not further pollute the sample with more
                ControlTemplates, I'll stick with simply overriding
                the HilightBrushKey for the hovered MenuItem.
                Poor man's Style. :-)
            -->
            <Style.Resources>
                <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Offset="0.3" Color="#FFFFD5A0" />
                    <GradientStop Offset="0.51" Color="#FFEFA335" />
                    <GradientStop Offset="0.986" Color="#FFFFC14A" />
                </LinearGradientBrush>
            </Style.Resources>

            <!--  This will help us bind to the Header of a TabItem  -->
            <Setter Property="Header" Value="{Binding Path=Header}" />
            <!--
                In order for MenuItems to support the IsEnabled state of a TabItem,
                we simply bind the IsEnabled property of the MenuItem to that of the
                TabItem.
                This way, a disabled TabItem will not be selectable via the Menu.
            -->
            <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled}" />
            <!--
                By making the MenuItems checkable AND binding the IsChecked
                property to the IsSelected property of the TabItems, we'll
                efficiently allow to pick the selected TabItem from the Menu
                with a simple two-way binding.
            -->
            <Setter Property="IsCheckable" Value="{Binding Path=IsEnabled}" />
            <Setter Property="IsChecked" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
            <Setter Property="Foreground" Value="{StaticResource MenuItemForegroundBrush}" />
            <Style.Triggers>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushSelected}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{StaticResource MenuItemDisabledForegroundBrush}" />
                    <Setter Property="Background" Value="{StaticResource MenuItemDisabledBackgroundBrush}" />
                </Trigger>
                <!--  Provide a hover-appearance for disabled MenuItems  -->
                <!--
               This won't work due to the fact that disabled items neither receive
               IsHighlighted nor IsMouseOver ... I'll leave this for now.
            <MultiTrigger>
               <MultiTrigger.Conditions>
                  <Condition SourceName="Border" Property="IsMouseOver" Value="True"/>
                  <Condition Property="IsEnabled" Value="False"/>
               </MultiTrigger.Conditions>
               <Setter Property="Background"
                                Value="{StaticResource MenuItem_DisabledBackgroundBrush}"/>
            </MultiTrigger>
                -->
            </Style.Triggers>
        </Style>

        <!--  ******** Stuff for the TabItemCloseButton (added in part IV) -> ************  -->
        <SolidColorBrush x:Key="TabItemCloseButtonNormalForegroundBrush" Color="{StaticResource TabItemForegroundColorBase}" />
        <SolidColorBrush x:Key="TabItemCloseButtonHoverForegroundBrush" Color="White" />
        <SolidColorBrush x:Key="TabItemCloseButtonPressedForegroundBrush" Color="#EEEE" />

        <LinearGradientBrush x:Key="TabItemCloseButtonNormalBackgroundBrush" StartPoint="0,0" EndPoint="1,0">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#5FFF" />
                    <GradientStop Offset="1.0" Color="#5CCC" />
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="TabItemCloseButtonNormalBorderBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#5CCC" />
                    <GradientStop Offset="1.0" Color="#5444" />
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="TabItemCloseButtonHoverBackgroundBrush" StartPoint="0,1" EndPoint="1,0">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#FFDF2B1E" />
                    <GradientStop Offset="1.0" Color="#FFA41F00" />
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="TabItemCloseButtonPressedBackgroundBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#FFA41F00" />
                    <GradientStop Offset="1.0" Color="#FFDF2B1E" />
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="TabItemCloseButtonPressedBorderBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.0" Color="#5444" />
                    <GradientStop Offset="1.0" Color="#5CCC" />
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <Style x:Key="TabItemCloseButtonStyle" TargetType="{x:Type Button}">
            <!--
                The default value for SnapsToDevicePixels actually is False
                (so this setter really wouldn't be required). However, I'm
                adding this nevertheless in order to explicitly point out that,
                in this case, it is required (see below).
            -->
            <Setter Property="SnapsToDevicePixels" Value="false" />
            <Setter Property="Height" Value="{StaticResource CloseButtonWidthAndHeight}" />
            <Setter Property="Width" Value="{StaticResource CloseButtonWidthAndHeight}" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border
                            x:Name="ButtonBorder"
                            Background="{StaticResource TabItemCloseButtonNormalBackgroundBrush}"
                            BorderBrush="{StaticResource TabItemCloseButtonNormalBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="2">
                            <Grid>
                                <!--  The Path below will render the button's X.  -->
                                <Path
                                    x:Name="ButtonPath"
                                    Margin="2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{StaticResource XCloseButton}"
                                    Stretch="Uniform"
                                    Stroke="{StaticResource TabItemCloseButtonNormalForegroundBrush}"
                                    StrokeEndLineCap="Round"
                                    StrokeStartLineCap="Round"
                                    StrokeThickness="2" />
                                <!--  We don't really need the ContentPresenter, but what the heck ...  -->
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource TabItemCloseButtonHoverBackgroundBrush}" />
                                <Setter TargetName="ButtonPath" Property="Stroke" Value="{StaticResource TabItemCloseButtonHoverForegroundBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource TabItemCloseButtonPressedBackgroundBrush}" />
                                <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource TabItemCloseButtonPressedBorderBrush}" />
                                <Setter TargetName="ButtonPath" Property="Stroke" Value="{StaticResource TabItemCloseButtonPressedForegroundBrush}" />
                                <!--
                                    Simulate a pressed-effect by moving the contents down and to the right.
                                    Since the button is pretty small, the trick here is to only shift things
                                    just a tiny little bit, hence the fractional values below.
                                    Note that, in order for this to work as expected, SnapsToDevicePixels
                                    must be set to "false" (see the setter at the top of this style).
                                -->
                                <Setter TargetName="ButtonPath" Property="Margin" Value="2.5,2.5,1.5,1.5" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--  ******** <- Stuff for the TabItemCloseButton (added in part IV) ************  -->


        <!--  The TabControl's Style.  -->
        <Style TargetType="{x:Type TabControl}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="BorderThickness" Value="1,0,1,1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabControl">
                        <Grid KeyboardNavigation.TabNavigation="Local">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <!--
                                In order to still draw the LinearGradient that makes up for the bottom
                                line of the TabPanel, we need to wrap the ScrollViewer in a Border
                                control that will be responsible for drawing the background.
                            -->
                            <Border
                                Name="TabPanelBorder"
                                Height="35"
                                Background="{StaticResource TabPanelBackgroundBrush}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <!--  The TabItems (resp. the TabPanel) will appear here  -->
                                        <ColumnDefinition Width="*" />
                                        <!--  The ScrollViewer controls will appear here  -->
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ScrollViewer
                                        Name="svTP"
                                        Grid.Row="0"
                                        Grid.RowSpan="2"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        CanContentScroll="True"
                                        HorizontalScrollBarVisibility="Hidden"
                                        IsDeferredScrollingEnabled="False"
                                        SnapsToDevicePixels="True"
                                        VerticalScrollBarVisibility="Disabled">
                                        <!--
                                            This is the area in which TabItems (the strips) will be drawn.
                                            
                                            Unselected TabItems will apply a right margin of -4px in
                                            order to overlay the item to their right. In order to allow
                                            the rightmost TabItem to be fully displayed (rather than
                                            being overlayed with the Button-Panel), we need to apply this
                                            as the Margin here.
                                        -->
                                        <usercontrols1:ScrollableTabPanel
                                            x:Name="PART_ScrollContentPresenter"
                                            Margin="{StaticResource TabPanelPadding}"
                                            AnimationTimeSpan="0:0:0.25"
                                            IsItemsHost="True"
                                            KeyboardNavigation.TabIndex="1"
                                            LineScrollPixelCount="100"
                                            RightOverflowMargin="4" />
                                    </ScrollViewer>
                                    <!--  ReSharper disable once Xaml.IndexOutOfGridDefinition  -->
                                    <StackPanel
                                        Grid.Row="1"
                                        Grid.Column="3"
                                        Margin="{StaticResource TabPanelScrollControlsPanelMargin}"
                                        Orientation="Horizontal">
                                        <!--
                                            The two RepeatButtons below will actually provide the scroll-
                                            functionality for the TabItems. Since the ScrollableTabPanel
                                            does not implements PageLeft/PageRight, LineLeft/LineRight
                                            are used.
                                        -->
                                        <RepeatButton
                                            x:Name="cmdScrollLeft"
                                            CommandTarget="{Binding ElementName=svTP}"
                                            Content="{StaticResource ArrowLeftPath}"
                                            IsEnabled="{Binding ElementName=PART_ScrollContentPresenter, Path=CanScrollLeft}"
                                            Style="{StaticResource LineButtonStyle}" />
                                        <!--  Command="ScrollBar.LineLeftCommand"  -->
                                        <RepeatButton
                                            x:Name="cmdScrollRight"
                                            CommandTarget="{Binding ElementName=svTP}"
                                            Content="{StaticResource ArrowRightPath}"
                                            IsEnabled="{Binding ElementName=PART_ScrollContentPresenter, Path=CanScrollRight}"
                                            Style="{StaticResource LineButtonStyle}" />
                                        <!--  Command="ScrollBar.LineRightCommand"  -->
                                        <!--
                                            This will present another "button" which will open up the Menu
                                            containing all TabItems, with the selected one being checked.
                                            Clicking an item here will select the respective TabItem.
                                        -->
                                        <Menu Background="Transparent">
                                            <MenuItem
                                                ItemContainerStyle="{StaticResource TabMenuItem}"
                                                ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}}, Path=Items}"
                                                Style="{StaticResource TabMenuButtonStyle}" />
                                        </Menu>
                                        <RepeatButton
                                            x:Name="cmdCloseAll"
                                            Click="CmdCloseAllClick"
                                            Content="{StaticResource ArrowDownPath}"
                                            Style="{StaticResource LineButtonStyle}" />
                                    </StackPanel>
                                </Grid>
                            </Border>

                            <!--
                                This is the outer border of the TabControl itself, actually meaning
                                the Panel that will host a TabItem's content.
                                The top-border here will not be drawn as, otherwise, the TabPanel
                                would always show a thin line for the selected Tab (which we want
                                to avoid).
                            -->
                            <Border
                                Grid.Row="1"
                                Background="{StaticResource TabControlBackgroundBrushBase}"
                                BorderBrush="{StaticResource TabItemBorderBrushSelected}"
                                BorderThickness="1,0,1,1">
                                <!--  This is the first/outer Border drawn on the TabPage  -->
                                <Border
                                    Margin="8"
                                    BorderBrush="{StaticResource TabPageInnerBorderBrushDark}"
                                    BorderThickness="1"
                                    CornerRadius="3">
                                    <!--
                                        This is the second/inner Border drawn on the TabPage.
                                        This Border is drawn with a horizontal Gradient that is transparent
                                        on the left which produces the fading effect.
                                    -->
                                    <Border
                                        Margin="0"
                                        Padding="2,2,3,3"
                                        BorderBrush="{StaticResource TabPageInnerBorderBrushBright}"
                                        BorderThickness="1"
                                        CornerRadius="2">
                                        <!--
                                            This is where the Content of the selected TabPage
                                            will be rendered.
                                        -->
                                        <ContentPresenter
                                            x:Name="PART_SelectedContentHost"
                                            Margin="0"
                                            ContentSource="SelectedContent" />
                                    </Border>
                                </Border>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  This is required in order to appropriately draw the focus-visual  -->
        <Style x:Key="TabItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle
                            Margin="0,8,3,6"
                            SnapsToDevicePixels="true"
                            Stroke="#555"
                            StrokeDashArray="1 2"
                            StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  The Style for TabItems (strips).  -->
        <Style TargetType="{x:Type TabItem}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <!--  The Grid helps defining the general height of TabItems.  -->
                        <Grid Height="35" VerticalAlignment="Bottom">
                            <!--
                                The important aspect here is that the bottom of the Border is 0px thick,
                                helping the TabItem/strip to blend into the TabPage.
                            -->
                            <Border
                                Name="Border"
                                Margin="{StaticResource TabItemMarginBase}"
                                Background="{StaticResource TabItemBackgroundBrushUnselected}"
                                BorderBrush="{StaticResource TabItemBorderBrushSelected}"
                                BorderThickness="2,1,1,0"
                                CornerRadius="3,3,0,0">
                                <!--
                                    ********
                                    This grid, along with its content (except for the TI-ContentPresenter)
                                    have been added in part IV.
                                    ************
                                -->
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <!--  Text / TabItem's Caption  -->
                                        <ColumnDefinition />
                                        <!--  Close button  -->
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <!--  This is where the Content of the TabItem will be rendered.  -->
                                    <ContentPresenter
                                        x:Name="ContentSite"
                                        Margin="7,2,12,2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        ContentSource="Header"
                                        RecognizesAccessKey="True" />
                                    <!--
                                        This represents the Close-button.
                                        
                                        The Command-binding that we create here refers to the Window's
                                        DataContext (which, for the sample, is the window's code-behind);
                                        In order for the Command to be able to determine which TabItem the
                                        button belongs to, a relative binding will do the trick (i.e.,
                                        (bubble up to the parent TabItem).
                                        Command="{Binding Path=CloseCommand}"
                                    -->
                                    <Button
                                        x:Name="cmdTabItemCloseButton"
                                        Grid.Column="1"
                                        Margin="-7,5,7,5"
                                        Click="CmdTabItemCloseButtonClick"
                                        CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabItem}}}"
                                        Style="{StaticResource TabItemCloseButtonStyle}" />
                                </Grid>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!--  The appearance of a TabItem when it's inactive/unselected  -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Border.IsMouseOver" Value="False" />
                                    <Condition Property="IsSelected" Value="False" />
                                </MultiTrigger.Conditions>
                                <!--
                                    The Triggers required to animate the TabItem when it enters/leaves
                                    the "Unselected" state (added in part two)
                                -->
                                <MultiTrigger.EnterActions>
                                    <BeginStoryboard x:Name="sbUnselected" Storyboard="{StaticResource TabItemStoryBoardUnselected}" />
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <StopStoryboard BeginStoryboardName="sbUnselected" />
                                </MultiTrigger.ExitActions>
                                <Setter Property="Panel.ZIndex" Value="90" />
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItemBackgroundBrushUnselected}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItemBorderUnselected}" />
                                <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushUnselected}" />
                                <!--  Except for the selected TabItem, tabs are to appear smaller in height.  -->
                                <Setter TargetName="Border" Property="Margin" Value="{StaticResource TabItemMarginBase}" />
                            </MultiTrigger>

                            <!--
                                The appearance of a TabItem when it's disabled
                                (in addition to Selected=False)
                            -->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Panel.ZIndex" Value="80" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItemDisabledBorderBrush}" />
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItemBackgroundBrushDisabled}" />
                                <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushDisabled}" />
                                <Setter TargetName="Border" Property="Margin" Value="{StaticResource TabItemMarginBase}" />
                            </Trigger>

                            <!--  The appearance of a TabItem when the mouse hovers over it  -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Border.IsMouseOver" Value="True" />
                                    <Condition Property="IsSelected" Value="False" />
                                </MultiTrigger.Conditions>
                                <!--
                                    The Triggers required to animate the TabItem when it enters/leaves the "Hover"
                                    state (added in part two)
                                -->
                                <MultiTrigger.EnterActions>
                                    <StopStoryboard BeginStoryboardName="sbUnselected_Hover_Exit" />
                                    <BeginStoryboard x:Name="sbHover" Storyboard="{StaticResource TabItemStoryBoardHover}" />
                                </MultiTrigger.EnterActions>
                                <MultiTrigger.ExitActions>
                                    <BeginStoryboard x:Name="sbUnselected_Hover_Exit" Storyboard="{StaticResource TabItemStoryBoardUnselected}" />
                                </MultiTrigger.ExitActions>
                                <Setter Property="Panel.ZIndex" Value="99" />
                                <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushHover}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItemHoverBorderBrush}" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="2,1,1,1" />
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItemHoverBackgroundBrush}" />
                                <!--
                                    To further increase the hover-effect, extend the TabItem's height a little
                                    more compared to unselected TabItems.
                                -->
                                <Setter TargetName="Border" Property="Margin" Value="{StaticResource TabItemMarginHoverFinal}" />
                            </MultiTrigger>

                            <!--  The appearance of a TabItem when it's active/selected  -->
                            <Trigger Property="IsSelected" Value="True">
                                <!--
                                    The Triggers required to animate the TabItem when it
                                    enters/leaves the "Selected" state (added in part two)
                                -->
                                <Trigger.EnterActions>
                                    <StopStoryboard BeginStoryboardName="sbUnselected_Selected_Exit" />
                                    <BeginStoryboard x:Name="sbSelected" Storyboard="{StaticResource TabItemStoryBoardSelected}" />
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard x:Name="sbUnselected_Selected_Exit" Storyboard="{StaticResource TabItemStoryBoardUnselected}" />
                                </Trigger.ExitActions>
                                <!--  We want the selected TabItem to always be on top.  -->
                                <Setter Property="Panel.ZIndex" Value="100" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItemBorderBrushSelected}" />
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItemBackgroundBrushSelected}" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                                <Setter Property="Foreground" Value="{StaticResource TabItemTextBrushSelected}" />
                                <Setter TargetName="Border" Property="Margin" Value="{StaticResource TabItemMarginSelected}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>


    <DockPanel>
        <Menu
            Height="30"
            Margin="0"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            DockPanel.Dock="Top">
            <MenuItem Header="File">
                <MenuItem Click="OpenClick" Header="Open" />
                <MenuItem
                    Click="CloseClick"
                    Header="Close current database"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="SaveAsClick"
                    Header="SaveAs"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="SaveACopyClick"
                    Header="Save a Copy"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="CompactDatabaseClick"
                    Header="Compact Database"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="ImportClick"
                    Header="Import Data from another DB3"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem Click="ExitClick" Header="Exit" />
            </MenuItem>
            <MenuItem Header="Views">
                <MenuItem
                    Click="AffordanceColorViewClick"
                    Header="Colors of all the Affordances "
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="TimeLimitsAffordancesViewClick"
                    Header="Overview of the Time Limits of all affordances"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="AffordancesRealDevices"
                    Header="Affordances with Real Devices"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="HouseholdsRealDevicesClick"
                    Header="Households with Real Devices"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="UnusedAffordancesClick"
                    Header="Unused Affordances"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="UnusedTimeLimitsClick"
                    Header="Unused Time Limits"
                    IsEnabled="{Binding IsMenuEnabled}" />

                <MenuItem
                    Click="DeviceOverviewClick"
                    Header="Device Overview"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="AffordanceVariableClick"
                    Header="Affordance Variable Use Overview"
                    IsEnabled="{Binding IsMenuEnabled}" />
            </MenuItem>
            <MenuItem Header="Basics">
                <MenuItem
                    Click="AddLoadType_Click"
                    Header="Add a Loadtype"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="AddHoliday_Click"
                    Header="Add a Holiday"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="AddGeographicLocation_Click"
                    Header="Add a Geographic Location"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="AddDateBasedProfile_Click"
                    Header="Add a Date Based Profile"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddProfile"
                    Click="AddProfile_Click"
                    Header="Add a Time Profile"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddTimeLimit"
                    Click="AddTimeLimit_Click"
                    Header="Add a Time Limit"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddTemperatureProfile"
                    Click="AddTemperatureProfile_Click"
                    Header="Add a Temperature Profile"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddVacation"
                    Click="AddVacation_Click"
                    Header="Add a Vacation"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddVariable"
                    Click="AddVariable_Click"
                    Header="Add a Variable"
                    IsEnabled="{Binding IsMenuEnabled}" />
            </MenuItem>

            <MenuItem Header="Households">
                <MenuItem
                    Name="AddDesire"
                    Click="AddDesire_Click"
                    Header="Add a Desire"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Click="AddPerson_Click"
                    Header="Add a Person"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddLocation"
                    Click="AddLocation_Click"
                    Header="Add a Location"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddDevice"
                    Click="AddDevice_Click"
                    Header="Add a Device"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddDeviceTaggingSet"
                    Click="AddDeviceTaggingSet_Click"
                    Header="Add a Device Tagging Set"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddDeviceCategory"
                    Click="AddDeviceCategory_Click"
                    Header="Add a Device Category"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddDeviceActionGroup"
                    Click="AddDeviceActionGroup_Click"
                    Header="Add a Device Action Group"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddDeviceAction"
                    Click="AddDeviceAction_Click"
                    Header="Add a Device Action"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddAffordance"
                    Click="AddAffordance_Click"
                    Header="Add an Affordance"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddSubAffordance"
                    Click="AddSubAffordance_Click"
                    Header="Add a Sub-Affordance"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddAffordanceTaggingSet"
                    Click="AddAffordanceTaggingSet_Click"
                    Header="Add an Affordance Tagging Set"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddHouseholdTraitTag"
                    Click="AddHouseholdTraitTag_Click"
                    Header="Add a Household Trait Tag"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddLivingPatternTag"
                    Click="AddLivingPatternTag_Click"
                    Header="Add a Living Pattern Tag"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddHouseholdTrait"
                    Click="AddHouseholdTrait_Click"
                    Header="Add a Household Trait"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddDeviceSelection"
                    Click="AddDeviceSelection_Click"
                    Header="Add a Device Selection"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddModularHousehold"
                    Click="AddModularHousehold_Click"
                    Header="Add a Modular Household"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddTemplateTag"
                    Click="AddTemplateTag_Click"
                    Header="Add a Template Tag"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddHouseholdTemplate"
                    Click="AddHouseholdTemplate_Click"
                    Header="Add a Household Template"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <!--<MenuItem
                    Name="AddTemplatePerson"
                    Click="AddTemplatePerson_Click"
                    Header="Add a Template Person"
                    IsEnabled="{Binding IsMenuEnabled}" />-->
            </MenuItem>
            <MenuItem Header="Houses">
                <MenuItem
                    Name="AddGenerator"
                    Click="AddGenerator_Click"
                    Header="Add a Generator"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddTransformDevice"
                    Click="AddTransformDevice_Click"
                    Header="Add a Transformation Device"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddEnergyStorageDevice"
                    Click="AddEnergyStorageDevice_Click"
                    Header="Add an Energy Storage Device"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddHouseType"
                    Click="AddHouseType_Click"
                    Header="Add a House Type"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddHouse"
                    Click="AddHouse_Click"
                    Header="Add a House"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddSettlement"
                    Click="AddSettlement_Click"
                    Header="Add a Settlement"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddHouseholdPlan"
                    Click="AddHouseholdPlan_Click"
                    Header="Add a Household Plan"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddSettlementTemplate"
                    Click="AddSettlementTemplateClick"
                    Header="Add a Settlement Template"
                    IsEnabled="{Binding IsMenuEnabled}" />
            </MenuItem>
            <MenuItem Header="Transportation">
                <MenuItem
                    Name="AddSite"
                    Click="AddSiteClick"
                    Header="Add a site"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddTransportationDeviceCategory"
                    Click="AddTransportationDeviceCategoryClick"
                    Header="Add a transportation device category"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddTransportationDevice"
                    Click="AddTransportationDeviceClick"
                    Header="Add a transportation device"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddTransportationDeviceSet"
                    Click="AddTransportationDeviceSetClick"
                    Header="Add a transportation device set"
                    IsEnabled="{Binding IsMenuEnabled}" />


                <MenuItem
                    Name="AddTravelRoute"
                    Click="AddTravelRouteClick"
                    Header="Add a travel route"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddTravelRouteSet"
                    Click="AddTravelRouteSetClick"
                    Header="Add a travel route set"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="AddChargingStationSetItem"
                    Click="AddChargingStationSet"
                    Header="Add a charging station set"
                    IsEnabled="{Binding IsMenuEnabled}" />

            </MenuItem>




            <MenuItem Header="Development" Visibility="Visible">
                <MenuItem
                    Name="AddTestSettlement"
                    Click="AddTestSettlement_Click"
                    Header="Add a special test settlement with all households"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="IntegrityCheck"
                    Click="IntegrityCheck_OnClick"
                    Header="Run the database integrity check"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="ComprehensiveAdd"
                    Click="ComprehensiveAddClick"
                    Header="Add complete new Affordance"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="HHTemplateCreator"
                    Click="HHTemplateCreatorClick"
                    Header="Making missing Household templates"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="TemplatedDeleter"
                    Click="TemplatedDeleteorClick"
                    Header="Delete all templated items"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="Screenshoter"
                    Click="Screenshotter_OnClick"
                    Header="Single Screenshot of the current tab"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="ScreenshotterAll"
                    Click="AllScreenshotter_OnClick"
                    Header="Screenshot of all tabs for the documentation"
                    IsEnabled="{Binding IsMenuEnabled}" />

                <!--<MenuItem
                    Name="TemplatePersonHH"
                    Click="TemplatePersonHouseholds_OnClick"
                    Header="Create / Sync households for testing of the templated persons"
                    IsEnabled="{Binding IsMenuEnabled}" />

                <MenuItem
                    Name="CreateTemplatePersons"
                    Click="UpdateTemplatePersonDescriptions_OnClick"
                    Header="(Re-)Create Template Persons"
                    IsEnabled="{Binding IsMenuEnabled}" />-->
                <MenuItem
                    Name="CalcRealisticTraitTimeEstimates"
                    Click="CalcRealisticTraitTimeEstimates_OnClick"
                    Header="Calculate time estimates for all household traits based on calculation outcomes"
                    IsEnabled="{Binding IsMenuEnabled}" />

                <MenuItem
                    Name="UpdateVacationsInHouseholdTemplates"
                    Click="HouseholdTemplateVacationUpdate_OnClick"
                    Header="Updates all household templates to randomly generate vacations"
                    IsEnabled="{Binding IsMenuEnabled}" />

                <MenuItem
                    Name="DeleteAllHouseholdTemplates"
                    Click="DeleteAllHouseholdTemplates_OnClick"
                    Header="Deletes all household templates"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="CopyLivingPatterns"
                    Click="BtnCopyLivingPatterns"
                    Header="Copy Living Patterns"
                    IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem
                    Name="ThrowTestException"
                    Click="ThrowTestException_OnClick"
                    Header="Creates a Test Exception to test the internet bug reporting."
                    IsEnabled="{Binding IsMenuEnabled}" />
            </MenuItem>
            <MenuItem Header="Help">
                <MenuItem
                    Name="About"
                    Click="About_Click"
                    Header="About..." />
                <!--<MenuItem Header="Convert all affordances to the new type" Name="ConvertAffordancesCheck" Click="ConvertAffordances_OnClick"  IsEnabled="{Binding IsMenuEnabled}" />-->
                <!--<MenuItem Header="Convert all real devices in all households to device categories" Name="ConvertAllDevices" Click="ConvertAllDevices_Click"  IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem Header="Make graphics test" Name="MakeGraphics" Click="MakeGraphics_Click"  IsEnabled="{Binding IsMenuEnabled}" />-->
            </MenuItem>
            <MenuItem Header="Python Script">
                <MenuItem
                    Name="pythonscript"
                    Click="Python_Script"
                    Header="Python Script" />
                <!--<MenuItem Header="Convert all affordances to the new type" Name="ConvertAffordancesCheck" Click="ConvertAffordances_OnClick"  IsEnabled="{Binding IsMenuEnabled}" />-->
                <!--<MenuItem Header="Convert all real devices in all households to device categories" Name="ConvertAllDevices" Click="ConvertAllDevices_Click"  IsEnabled="{Binding IsMenuEnabled}" />
                <MenuItem Header="Make graphics test" Name="MakeGraphics" Click="MakeGraphics_Click"  IsEnabled="{Binding IsMenuEnabled}" />-->
            </MenuItem>

        </Menu>

        <Grid DockPanel.Dock="Bottom">
            <Grid.RowDefinitions>


                <RowDefinition Height="3*" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid Name="WindowGrid" Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*" />
                    <ColumnDefinition Width="15" />
                    <ColumnDefinition Width="2*" />
                </Grid.ColumnDefinitions>
                <model:GlobalTree
                    x:Name="MyGlobalTree"
                    Grid.Column="0"
                    Margin="0,0" />
                <GridSplitter
                    Name="GridSplitter1"
                    Grid.Column="1"
                    Margin="0"
                    HorizontalAlignment="Stretch" />

                <TabControl
                    x:Name="Tabs"
                    Grid.Column="2"
                    Margin="1" />
            </Grid>


            <GridSplitter
                Grid.Row="1"
                Height="10"
                Margin="0"
                HorizontalAlignment="Stretch" />
            <Grid Grid.Row="2" MaxHeight="500">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <ListView
                    Name="LstProgress"
                    Grid.Row="0"
                    MinHeight="50"
                    Margin="0"
                    ItemsSource="{Binding LogMessages}"
                    MouseDoubleClick="LstProgress_OnMouseDoubleClick">

                    <ListView.View>
                        <GridView>

                            <GridView.ColumnHeaderContainerStyle>
                                <Style>
                                    <Setter Property="FrameworkElement.Visibility" Value="Collapsed" />
                                </Style>
                            </GridView.ColumnHeaderContainerStyle>
                            <GridViewColumn
                                Width="auto"
                                DisplayMemberBinding="{Binding Time}"
                                Header="Time" />
                            <GridViewColumn Width="2000" Header="Message">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <WrapPanel>
                                            <TextBlock Text="{Binding Message}" />
                                        </WrapPanel>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>

                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                </ListView>


            </Grid>

        </Grid>
    </DockPanel>

</Window>
<!--  ReSharper restore UnusedMember.Global  -->